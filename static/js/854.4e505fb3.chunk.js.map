{"version":3,"file":"static/js/854.4e505fb3.chunk.js","mappings":"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","sources":["redux/transactions/transactions-selectors.js","webpack://react-homework-template/./src/components/Wallet/ModalAddTransaction.module.css?050b","webpack://react-homework-template/./src/components/Wallet/Transactions.module.css?ecce","components/Wallet/CustomDatePicker.jsx","components/Wallet/ModalAddTransaction.jsx","components/Wallet/Transactions.jsx"],"sourcesContent":["export const selectTransactions = state => state.transactions.transactions;\nexport const selectCategories = state => state.transactions.categories;\nexport const selectError = state => state.transactions.error;\nexport const selectModalStatus = state =>\n  state.transactions.isTransactionModalOpen;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"ModalAddTransaction_backdrop__9YaTy\",\"modal\":\"ModalAddTransaction_modal__Ds58Q\",\"modalForm\":\"ModalAddTransaction_modalForm__+xHlN\",\"closeBtn\":\"ModalAddTransaction_closeBtn__PD4qb\",\"inactive\":\"ModalAddTransaction_inactive__XoOqJ\",\"income\":\"ModalAddTransaction_income__9Qunp\",\"expense\":\"ModalAddTransaction_expense__FAXIm\"};","// extracted by mini-css-extract-plugin\nexport default {\"customDateInput\":\"Transactions_customDateInput__zz46T\"};","import { forwardRef } from 'react';\nimport s from './Transactions.module.css';\n\nexport const CustomDatePicker = forwardRef(({ value, onClick }, ref) => {\n  return (\n    <input\n      value={value}\n      className={s.customDateInput}\n      onClick={onClick}\n      onChange={onClick}\n      ref={ref}\n      required\n    />\n  );\n});\n","// Зробити валідацію поля форми, використовувати: 1) бібліотеку formik та yup або 2) indicative. Обов'язковою має бути тільки сума транзакції,\n\nimport { useFormik } from 'formik';\nimport DatePicker from 'react-datepicker';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleModal } from 'redux/transactions/transactions-slice';\nimport { useEffect, useState } from 'react';\nimport * as yup from 'yup';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport s from './ModalAddTransaction.module.css';\nimport {\n  addTransaction,\n  getCategories,\n} from 'redux/transactions/transactions-operations';\nimport { selectCategories } from 'redux/transactions/transactions-selectors';\nimport { CustomDatePicker } from './CustomDatePicker';\n\nexport function ModalAddTransaction() {\n  const [startDate, setStartDate] = useState(new Date());\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCategories());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const closeOnEsc = e => {\n      if (e.code === 'Escape') {\n        dispatch(toggleModal());\n      }\n    };\n\n    document.addEventListener('keydown', closeOnEsc);\n    return () => document.removeEventListener('keydown', closeOnEsc);\n  }, [dispatch]);\n\n  function closeOnOverlay(e) {\n    if (e.target === e.currentTarget) {\n      dispatch(toggleModal());\n    }\n  }\n\n  const categories = useSelector(selectCategories);\n\n  const formik = useFormik({\n    initialValues: {\n      type: true,\n      amount: '',\n      comment: '',\n      categoryId: '',\n    },\n    validationSchema: yup.object({\n      type: yup.bool().required('Required'),\n      amount: yup.number().required('Required'),\n      comment: yup.string().max(40, '40 characters max'),\n      categoryId: yup.string().required('Required'),\n    }),\n\n    onSubmit: ({ categoryId, type, amount, comment }) => {\n      const newTransaction = {\n        transactionDate: startDate,\n        comment,\n        categoryId: type ? categoryId : '063f1132-ba5d-42b4-951d-44011ca46262',\n        amount: type ? Number(amount) * -1 : Number(amount),\n        type: type ? 'EXPENSE' : 'INCOME',\n      };\n      dispatch(addTransaction(newTransaction));\n      dispatch(toggleModal());\n    },\n  });\n\n  const { handleChange, handleSubmit, values, errors, touched } = formik;\n\n  return (\n    <div className={s.backdrop} onClick={closeOnOverlay}>\n      <div className={s.modal}>\n        <button\n          className={s.closeBtn}\n          onClick={() => dispatch(toggleModal())}\n          type=\"button\"\n          aria-label=\"close button\"\n        >\n          X\n        </button>\n\n        <form className={s.modalForm} onSubmit={handleSubmit}>\n          <h2>Add transaction</h2>\n\n          <span className={values.type ? s.inactive : s.income}>Income</span>\n          <input\n            name=\"type\"\n            type=\"checkbox\"\n            checked={values.type}\n            onChange={handleChange}\n          />\n          <span className={values.type ? s.expense : s.inactive}>Expense</span>\n\n          {values.type && (\n            <select\n              name=\"categoryId\"\n              value={values.categoryId}\n              onChange={handleChange}\n              required\n            >\n              <option value=\"\" disabled hidden>\n                Select your option\n              </option>\n              {categories.map(category =>\n                category.type === 'EXPENSE' ? (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ) : null\n              )}\n            </select>\n          )}\n          {touched.categoryId && errors.categoryId ? (\n            <div>{errors.categoryId}</div>\n          ) : null}\n\n          <input\n            name=\"amount\"\n            type=\"text\"\n            placeholder=\"0.00\"\n            value={values.amount}\n            onChange={handleChange}\n            required\n          />\n          {touched.amount && errors.amount ? <div>{errors.amount}</div> : null}\n\n          <DatePicker\n            selected={startDate}\n            dateFormat=\"dd.MM.yyyy\"\n            calendarStartDay={1}\n            onChange={date => {\n              setStartDate(date);\n            }}\n            customInput={<CustomDatePicker />}\n          />\n\n          <input\n            name=\"comment\"\n            type=\"text\"\n            placeholder=\"Your comment\"\n            value={values.comment}\n            onChange={handleChange}\n          />\n          {touched.comment && errors.comment ? (\n            <div>{errors.comment}</div>\n          ) : null}\n\n          <div>\n            <button type=\"submit\">Add</button>\n            <button type=\"button\" onClick={() => dispatch(toggleModal())}>\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { compareDesc, format, parseISO } from 'date-fns';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  getCategories,\n  getTransactions,\n} from 'redux/transactions/transactions-operations';\nimport {\n  selectCategories,\n  selectTransactions,\n  selectModalStatus,\n  selectError,\n} from 'redux/transactions/transactions-selectors';\nimport { toggleModal } from 'redux/transactions/transactions-slice';\nimport { ModalAddTransaction } from './ModalAddTransaction';\n\n// Продумана max-height: 60vh; (наприклад, а далі включається скролл всередині компонента, скільки vh проговорити це з автором DashboardPage)\n\nconst Transactions = () => {\n  const isModalOpen = useSelector(selectModalStatus);\n  const categories = useSelector(selectCategories);\n  const transactionsData = useSelector(selectTransactions);\n  const isError = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  const sortedTransactions = [...transactionsData].sort((a, b) =>\n    compareDesc(parseISO(a.transactionDate), parseISO(b.transactionDate))\n  );\n\n  useEffect(() => {\n    dispatch(getTransactions());\n    dispatch(getCategories());\n  }, [dispatch]);\n\n  !!isError && toast.error(isError);\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th style={{ padding: '5px' }}>Date</th>\n            <th style={{ padding: '5px' }}>Type</th>\n            <th style={{ padding: '5px' }}>Category</th>\n            <th style={{ padding: '5px' }}>Comment</th>\n            <th style={{ padding: '5px' }}>Sum</th>\n            <th style={{ padding: '5px' }}>Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedTransactions.map(\n            ({\n              id,\n              transactionDate,\n              type,\n              categoryId,\n              comment,\n              amount,\n              balanceAfter,\n            }) => (\n              <tr key={id}>\n                <td style={{ padding: '5px' }}>\n                  {format(parseISO(transactionDate), 'dd.MM.yyyy')}\n                </td>\n                <td style={{ padding: '5px' }}>{type}</td>\n                <td style={{ padding: '5px' }}>\n                  {\n                    categories.find(category => category.id === categoryId)\n                      ?.name\n                  }\n                </td>\n                <td style={{ padding: '5px' }}>{comment}</td>\n                <td style={{ padding: '5px' }}>{Math.abs(amount)}</td>\n                <td style={{ padding: '5px' }}>{balanceAfter}</td>\n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n      <button\n        type=\"button\"\n        aria-label=\"add transaction button\"\n        onClick={() => dispatch(toggleModal())}\n      >\n        Add Transaction\n      </button>\n      {isModalOpen && <ModalAddTransaction />}\n\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default Transactions;\n\n// <div className=\"transaction-wrap\">\n//   <div className=\"transaction-header\" style={{ display: 'flex' }}>\n//     <div style={{ marginLeft: '20px' }}>Date</div>\n//     <div style={{ marginLeft: '20px' }}>Type</div>\n//     <div style={{ marginLeft: '20px' }}>Category</div>\n//     <div style={{ marginLeft: '20px' }}>Comment</div>\n//     <div style={{ marginLeft: '20px' }}>Sum</div>\n//     <div style={{ marginLeft: '20px' }}>Balance</div>\n//   </div>\n//   <ul\n//     className=\"transaction-list\"\n//     style={{ listStyle: 'none', padding: '0' }}\n//   >\n//     {transData.map(trans => (\n//       <li style={{ display: 'flex' }}>\n//         <div className=\"transDetails\" style={{ marginLeft: '20px' }}>\n//           {trans.transactionDate}\n//         </div>\n//         <div className=\"transDetails\" style={{ marginLeft: '20px' }}>\n//           {trans.type}\n//         </div>\n//         <div className=\"transDetails\" style={{ marginLeft: '20px' }}>\n//           {trans.categoryId}\n//         </div>\n//         <div className=\"transDetails\" style={{ marginLeft: '20px' }}>\n//           {trans.comment}\n//         </div>\n//         <div className=\"transDetails\" style={{ marginLeft: '20px' }}>\n//           {trans.amount}\n//         </div>\n//         <div className=\"transDetails\" style={{ marginLeft: '20px' }}>\n//           {trans.balanceAfter}\n//         </div>\n//       </li>\n//     ))}\n//   </ul>\n// </div>\n"],"names":["selectTransactions","state","transactions","selectCategories","categories","selectError","error","selectModalStatus","isTransactionModalOpen","CustomDatePicker","forwardRef","ref","value","onClick","className","s","onChange","required","ModalAddTransaction","useState","Date","startDate","setStartDate","dispatch","useDispatch","useEffect","getCategories","closeOnEsc","e","code","toggleModal","document","addEventListener","removeEventListener","useSelector","formik","useFormik","initialValues","type","amount","comment","categoryId","validationSchema","yup","max","onSubmit","newTransaction","transactionDate","Number","addTransaction","handleChange","handleSubmit","values","errors","touched","target","currentTarget","name","checked","disabled","hidden","map","category","id","placeholder","selected","dateFormat","calendarStartDay","date","customInput","isModalOpen","transactionsData","isError","sortedTransactions","sort","a","b","compareDesc","parseISO","getTransactions","toast","style","padding","balanceAfter","format","find","Math","abs"],"sourceRoot":""}