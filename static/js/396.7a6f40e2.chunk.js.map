{"version":3,"file":"static/js/396.7a6f40e2.chunk.js","mappings":"6PAAaA,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,WAAWF,aAArB,EACrBG,EAAiB,SAAAF,GAAK,OAAIA,EAAMC,WAAWC,cAArB,EACtBC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,WAAWE,iBAArB,E,SCWtCC,EAAAA,GAAAA,SAAiBC,EAAAA,GAAYC,EAAAA,EAASC,EAAAA,IAEtC,IA6HA,EA7HmB,WACjB,IAAMC,GAAkBC,EAAAA,EAAAA,IAAYN,GAC9BO,GAAUD,EAAAA,EAAAA,IAAYP,GACtBS,GAASF,EAAAA,EAAAA,IAAYV,GAE3B,GAA4Ca,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,CAC/CG,MAAO,OACPC,MAAO,SAFT,eAAOC,EAAP,KAAqBC,EAArB,KAKMC,GAAWC,EAAAA,EAAAA,MACbC,EAAiB,IAErBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,CACnBC,MAAOX,EAAiBA,EAAeE,MAAQ,EAC/CU,KAAMR,EAAaF,OAErBW,QAAQC,IAAIJ,GACZJ,GAASS,EAAAA,EAAAA,GAAuBL,GACjC,GAAE,CAACV,EAAgBI,EAAcE,IAElC,IAwBMU,EAAO,CACXC,OAAQ,GAWRC,SAAU,CACR,CAEEF,KAAMR,EACNW,gBAAiB,CACf,wBACA,yBACA,yBACA,yBACA,yBACA,uBACA,yBACA,wBACA,wBAEFC,YAAa,GACbC,YAAa,KAKnB,OACE,iCACE,wCACA,SAAC,KAAD,CAAUL,KAAMA,KAChB,SAAC,KAAD,CACEM,SAAUrB,EACVsB,QA/DgB,CACpB,CAAErB,MAAO,IAAKC,MAAO,WACrB,CAAED,MAAO,IAAKC,MAAO,YACrB,CAAED,MAAO,IAAKC,MAAO,SACrB,CAAED,MAAO,IAAKC,MAAO,SACrB,CAAED,MAAO,IAAKC,MAAO,OACrB,CAAED,MAAO,IAAKC,MAAO,QACrB,CAAED,MAAO,IAAKC,MAAO,QACrB,CAAED,MAAO,IAAKC,MAAO,UACrB,CAAED,MAAO,IAAKC,MAAO,aACrB,CAAED,MAAO,KAAMC,MAAO,WACtB,CAAED,MAAO,KAAMC,MAAO,YACtB,CAAED,MAAO,KAAMC,MAAO,YACtB,CAAED,MAAO,GAAIC,MAAO,QAmDhBqB,YAAY,YAEd,SAAC,KAAD,CACEF,SAAUjB,EACVkB,QArDc,CAClB,CAAErB,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,IAAKC,MAAO,QAgDjBqB,YAAY,UAEd,4BACE,8BACE,2BACE,sCACA,mCAED7B,EAAgB8B,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAElC,OADApB,EAAeqB,KAAKD,GACJ,WAATD,GACL,2BACE,wBAAKD,KACL,wBAAKE,MAFEF,GAIP,IACL,UAGL,2BACE,2BACE,yCACA,uBAAI7B,QAEN,2BACE,uCACA,uBAAIC,YAKb,C","sources":["redux/statistics/statisticsSelectors.js","components/Wallet/Statistics.jsx"],"sourcesContent":["export const incomeSummary = state => state.statistics.incomeSummary;\nexport const expenseSummary = state => state.statistics.expenseSummary;\nexport const categoriesSummary = state => state.statistics.categoriesSummary;\n","import React, { useState } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport Select from 'react-select';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTransactionsSummary } from 'redux/statistics/statisticsOperations';\nimport {\n  categoriesSummary,\n  expenseSummary,\n  incomeSummary,\n} from 'redux/statistics/statisticsSelectors';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst Statistics = () => {\n  const stateStatistics = useSelector(categoriesSummary);\n  const expense = useSelector(expenseSummary);\n  const income = useSelector(incomeSummary);\n\n  const [selectedMounth, setSelectedMounth] = useState(null);\n  const [selectedYear, setSelectedYear] = useState({\n    value: '2022',\n    label: '2022',\n  });\n\n  const dispatch = useDispatch();\n  let dataStatistics = [];\n\n  useEffect(() => {\n    const timeSelected = {\n      month: selectedMounth ? selectedMounth.value : 0,\n      year: selectedYear.value,\n    };\n    console.log(timeSelected);\n    dispatch(getTransactionsSummary(timeSelected));\n  }, [selectedMounth, selectedYear, dispatch]);\n\n  const optionsMounth = [\n    { value: '1', label: 'January' },\n    { value: '2', label: 'February' },\n    { value: '3', label: 'March' },\n    { value: '4', label: 'April' },\n    { value: '5', label: 'May' },\n    { value: '6', label: 'June' },\n    { value: '7', label: 'July' },\n    { value: '8', label: 'August' },\n    { value: '9', label: 'September' },\n    { value: '10', label: 'October' },\n    { value: '11', label: 'November' },\n    { value: '12', label: 'December' },\n    { value: '', label: 'All' },\n  ];\n  const optionsYear = [\n    { value: '2022', label: '2022' },\n    { value: '2021', label: '2021' },\n    { value: '2020', label: '2020' },\n    { value: '2019', label: '2019' },\n    { value: '2018', label: '2018' },\n    { value: '0', label: 'All' },\n  ];\n\n  const data = {\n    labels: [\n      // 'Basic expenses',\n      // 'Products',\n      // 'Car',\n      // 'Self care',\n      // 'Child care',\n      // 'Household products',\n      // 'Education',\n      // 'Leisure',\n      // 'Other expenses',\n    ],\n    datasets: [\n      {\n        // label: '# of Votes',\n        data: dataStatistics,\n        backgroundColor: [\n          'rgba(254, 208, 87, 1)',\n          'rgba(255, 216, 208, 1)',\n          'rgba(253, 148, 152, 1)',\n          'rgba(197, 186, 255, 1)',\n          'rgba(110, 120, 232, 1)',\n          'rgba(74, 86, 226, 1)',\n          'rgba(129, 225, 255, 1)',\n          'rgba(36, 204, 167, 1)',\n          'rgba(0, 173, 132, 1)',\n        ],\n        borderColor: [],\n        borderWidth: 0,\n      },\n    ],\n  };\n\n  return (\n    <>\n      <h1>Statistics</h1>\n      <Doughnut data={data} />\n      <Select\n        onChange={setSelectedMounth}\n        options={optionsMounth}\n        placeholder=\"Mounth\"\n      />\n      <Select\n        onChange={setSelectedYear}\n        options={optionsYear}\n        placeholder=\"Year\"\n      />\n      <table>\n        <tbody>\n          <tr>\n            <th>Category</th>\n            <th>Sum</th>\n          </tr>\n          {stateStatistics.map(({ name, type, total }) => {\n            dataStatistics.push(total);\n            return type !== 'INCOME' ? (\n              <tr key={name}>\n                <td>{name}</td>\n                <td>{total}</td>\n              </tr>\n            ) : null;\n          })}\n        </tbody>\n      </table>\n      <ul>\n        <li>\n          <span>Expenses:</span>\n          <p>{expense}</p>\n        </li>\n        <li>\n          <span>Income:</span>\n          <p>{income}</p>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default Statistics;\n"],"names":["incomeSummary","state","statistics","expenseSummary","categoriesSummary","ChartJS","ArcElement","Tooltip","Legend","stateStatistics","useSelector","expense","income","useState","selectedMounth","setSelectedMounth","value","label","selectedYear","setSelectedYear","dispatch","useDispatch","dataStatistics","useEffect","timeSelected","month","year","console","log","getTransactionsSummary","data","labels","datasets","backgroundColor","borderColor","borderWidth","onChange","options","placeholder","map","name","type","total","push"],"sourceRoot":""}